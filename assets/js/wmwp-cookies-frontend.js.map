{"version":3,"file":"wmwp-cookies-frontend.js","mappings":"mBA8JA,MCrIMA,EAAgB,IDTtB,MAaEC,YAAcC,GAEZC,KAAKD,KAAOA,EAGZC,KAAKC,oBACP,CAeOC,UAAYC,EAAcC,EAAeC,GAE9C,MAAMC,EAAI,IAAIC,KAEdD,EAAEE,QAASF,EAAEG,UAAY,GAEzB,MAAMC,EAAU,WAAaJ,EAAEK,cAE/BC,SAASC,OAASV,EAAQ,IAAMC,EAAS,IAAMM,EAAU,UAAUV,KAAKD,IAC1E,CAUOe,UAAYX,GAEjB,MAAMY,EAAOZ,EAAQ,IAGfa,EAFgBC,mBAAoBL,SAASC,QAE1BK,MAAO,KAEhC,IAAM,IAAIC,EAAI,EAAGA,EAAIH,EAAGI,OAAQD,IAAM,CAEpC,IAAIE,EAAIL,EAAGG,GAEX,KAAyB,KAAjBE,EAAEC,OAAQ,IAChBD,EAAIA,EAAEE,UAAW,GAGnB,GAA0B,GAArBF,EAAEG,QAAST,GACd,OAAOM,EAAEE,UAAWR,EAAKK,OAAQC,EAAED,O,CAGzC,CAcAK,oBAAsBV,GACpBH,SAASC,OAASE,EAAO,uBAC3B,CASAd,qBAIE,GAFAD,KAAK0B,YAAc,GAEdd,SAASC,QAA6B,IAAnBD,SAASC,OAAe,CAE9C,MAAMG,EAAKJ,SAASC,OAAOK,MAAO,KAElC,IAAM,IAAIC,EAAI,EAAGA,EAAIH,EAAGI,OAAQD,IAAM,CAEpC,IAAIE,EAAIL,EAAGG,GAEX,KAAyB,KAAjBE,EAAEC,OAAQ,IAChBD,EAAIA,EAAEE,UAAW,GAGnB,MAAMI,EAAMN,EAAEH,MAAO,KAErBlB,KAAK0B,YAAYE,KAAOD,E,CAE1BE,QAAQC,IAAK9B,KAAK0B,Y,CAEtB,CAUAK,yBAEE,GAA+C,GAA1CC,OAAOC,KAAMjC,KAAK0B,aAAcN,OAAc,CAEjD,IAAIc,EAAiB,GACrB,IAAM,MAAMC,KAAOnC,KAAK0B,YAAc,CAEpCQ,EAAiBA,EAAiBC,EAAM,IAD1BnC,KAAK0B,YAAYS,E,EAIrC,GClImC,IAGrCvB,SAASwB,iBAAkB,oBAAoB,KAE7C,MAAMC,EAAmBzB,SAAS0B,cAAe,wBAC3CC,EAAaF,EAAiBC,cAAe,yBAC7CE,EAAUH,EAAiBC,cAAe,sBAG3CzC,EAAciB,UAAW,WAC5BuB,EAAiBI,MAAMC,QAAU,QAGnCH,EAAWH,iBAAkB,SAAS,KAEpCvC,EAAcK,UAAW,QAAS,OAAQ,SAC1CmC,EAAiBI,MAAMC,QAAU,MAAM,IAGzCF,EAAQJ,iBAAkB,SAAS,KAEjCvC,EAAcK,UAAW,QAAS,QAAS,SAC3CmC,EAAiBI,MAAMC,QAAU,MAAM,GACtC,G","sources":["webpack://wmwp-cookies/./src/components/WMCookies.ts","webpack://wmwp-cookies/./src/index.ts"],"sourcesContent":["/*jshint esversion: 6 */\n\n/**\n * WMCookies\n * class to handle cookies. Has methods to create \n * delete and update specific cookies\n * \n * @version 0.9\n * @author Webmind.agency\n */\n\ndeclare interface WMCookies {\n  path: string\n  arr_cookies: Array<Array<string>>\n}\n\nclass WMCookies {\n\n  static path: string;\n  static cookies_array: Array<Array<string>>;\n\n\n\n  /**\n   * Constructor fuction inilializes the class \n   * and stores cookies in an array to be nandled and saved more easily\n   * \n   *  @param path string where the cookie is meant to be stored\n   */\n  constructor ( path:string ) {\n\n    this.path = path;\n\n    // just for testing purposes at the moment.\n    this.createCookiesArray();\n  }\n\n\n\n\n  /**\n   * Creates new cookie or replace existing one\n   * \n   * @param cname name of the new cookie \n   * @param cvalue value of the cookie\n   * @param extime time to expire in miliseconds\n   * \n   * @returns void\n   * @since 0.9\n   */\n  public setCookie ( cname:string, cvalue:string, extime:number ) {\n\n    const d = new Date();\n\n    d.setTime( d.getTime() + ( extime ) );\n\n    const expires = 'expires=' + d.toUTCString();\n\n    document.cookie = cname + '=' + cvalue + ';' + expires + ';path=/'+this.path;\n  }\n\n\n\n  /**\n   * Gets value of a cookie\n   * \n   * @param cname name of the cookie to be given\n   * @returns string if the cookie is found or undefined\n   */\n  public getCookie ( cname:string ):string | undefined {\n\n    const name = cname + '=';\n    const decodedCookie = decodeURIComponent( document.cookie );\n\n    const ca = decodedCookie.split( ';' );\n\n    for ( let i = 0; i < ca.length; i++ ) {\n\n      let c = ca[i];\n\n      while ( c.charAt( 0 ) == ' ' ) {\n        c = c.substring( 1 );\n      }\n\n      if ( c.indexOf( name ) == 0 )\n        return c.substring( name.length, c.length );\n    }\n    return undefined;\n  }\n\n\n  /**\n   * Deletes cookie given\n   * \n   * TODO: make this functional. I don't really like this.\n   * Seems to delete all cookies and replaces with tha one given with expired date (#221218)\n   * \n   * @param name string name of the cookie to be deleted\n   * \n   * @returns void\n   * @since 0.9\n   */\n  static deleteCookie ( name:string ):void {\n    document.cookie = name + '=; Max-Age=-99999999;';\n  }\n\n\n  /**\n   * Stores document cookie string as array inside this class instance\n   * \n   * @returns void\n   * @since 0.9\n   */\n  createCookiesArray () {\n\n    this.arr_cookies = [];\n\n    if ( document.cookie && document.cookie != '' ) {\n\n      const ca = document.cookie.split( ';' );\n\n      for ( let i = 0; i < ca.length; i++ ) {\n\n        let c = ca[i];\n\n        while ( c.charAt( 0 ) == ' ' ) {\n          c = c.substring( 1 );\n        }\n\n        const csa = c.split( '=' );\n\n        this.arr_cookies.push ( csa );\n      }\n      console.log( this.arr_cookies );\n    }\n  }\n\n\n\n  /**\n   * Saves cookie from arr_cookies array\n   * \n   * @returns void\n   * @since 0.9\n   */\n  make_cookie_from_array () {\n\n    if ( Object.keys( this.arr_cookies ).length != 0 ) { \n\n      let updated_cookie = '';\n      for ( const key in this.arr_cookies ) {\n        const value = this.arr_cookies[key];\n        updated_cookie = updated_cookie + key + '=' + value;\n      }\n    }\n  }\n}\n\nexport default WMCookies;","\nimport WMCookies from './components/WMCookies';\n\n\n/** \n * Code to stop storing all cookies\n *\nexport {};\ndeclare global {\n  interface Document { \n    __defineGetter__: any; \n    __defineSetter__: any;\n  }\n}\nif( !document.__defineGetter__ ) {\n  Object.defineProperty( document, 'cookie', {\n    get: function () {return '';},\n    set: function () {return true;},\n  } );\n} else {\n  document.__defineGetter__( 'cookie', function () { return '';} );\n  document.__defineSetter__( 'cookie', function () { return '';} );\n}\n*/\n\nconst WMCookiesInst = new WMCookies( '' );\n\n\ndocument.addEventListener( 'DOMContentLoaded', ()=>{\n\n  const el_cookie_banner = document.querySelector( '#wmwp-cookies-banner' ) as HTMLDivElement;\n  const el_consent = el_cookie_banner.querySelector( '#wmwp-cookies-consent' );\n  const el_deny = el_cookie_banner.querySelector( '#wmwp-cookies-deny' );\n\n  //Hide if consent is given\n  if( !WMCookiesInst.getCookie( 'wmc09' ) ) {\n    el_cookie_banner.style.display = 'flex';\n  }\n\n  el_consent.addEventListener( 'click', ()=>{\n\n    WMCookiesInst.setCookie( 'wmc09', 'true', ( 1000*60*60*24*365 ) );\n    el_cookie_banner.style.display = 'none';\n  } );\n\n  el_deny.addEventListener( 'click', ()=>{\n\n    WMCookiesInst.setCookie( 'wmc09', 'false', ( 1000*60*60*24*365 ) );\n    el_cookie_banner.style.display = 'none';\n  } );\n} );"],"names":["WMCookiesInst","constructor","path","this","createCookiesArray","setCookie","cname","cvalue","extime","d","Date","setTime","getTime","expires","toUTCString","document","cookie","getCookie","name","ca","decodeURIComponent","split","i","length","c","charAt","substring","indexOf","static","arr_cookies","csa","push","console","log","make_cookie_from_array","Object","keys","updated_cookie","key","addEventListener","el_cookie_banner","querySelector","el_consent","el_deny","style","display"],"sourceRoot":""}